name: Build & Deploy
on: workflow_dispatch

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      mod_version: ${{ steps.changelog.outputs.mod_version }}
      mod_description: ${{ steps.changelog.outputs.mod_description }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@master
        with:
          dotnet-version: 6.0.x
        env:
          DOTNET_NOLOGO: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Build Module
        run: |
          $impl = $PWD.Path + '/bannerlord-implementations';
          $path = $PWD.Path + '/bannerlord';
          $final = $path + '/Modules/ROTFrench/bin/Win64_Shipping_Client/';
          $proj = 'src/ROTFrench.csproj';
          $pdll = $path + '/Modules/ROTFrench/bin/Win64_Shipping_Client/ROTFrench*.dll';
          $ppdb = $path + '/Modules/ROTFrench/bin/Win64_Shipping_Client/ROTFrench*.pdb';
          # The folders are required to be created before executing the script
          New-Item -ItemType directory -Force -Path $impl;
          New-Item -ItemType directory -Force -Path $path;
          [string[]]$gameversions = Get-Content -Path supported-game-versions.txt;
          # Process all implementations
          For ($i = 0; $i -le $gameversions.Length - 1; $i++)
          {
              $gameversion = $gameversions[$i];
              $version = $gameversion.substring(1);
              $constgameversion = $gameversion.replace(".", "");
              echo "::group::Build for $gameversion"
              echo "Start building for gameversion = $gameversion"
              dotnet clean $proj --configuration Release;
              dotnet build $proj --configuration Release -p:OverrideGameVersion=$gameversion -p:GameFolder="$path" -p:ConstGameVersionWithPrefix="$constgameversion";
              # Copy Implementations to the Implementations folder
              Copy-Item $pdll $impl/;
              Copy-Item $ppdb $impl/;
              echo "::endgroup::"
          }
          # Copy Implementations to the Module
          Copy-Item $impl/* $final;
          # Delete Implementations folder
          Remove-Item -Recurse $impl;
        shell: pwsh

      - name: Install and Run ChangelogParser
        id: changelog
        run: |
          dotnet tool install -g Bannerlord.ChangelogParser
          vers="$(bannerlord_changelog_parser latestversion -f "$PWD/changelog.txt")"
          echo "name={mod_version}::$vers" >> $GITHUB_OUTPUT
          desc="$(bannerlord_changelog_parser fulldescription -f "$PWD/changelog.txt")"
          desc="${desc//'%'/'%25'}"
          desc="${desc//$'"'/'%22'}"
          desc="${desc//$'\n'/'%0A'}"
          desc="${desc//$'\r'/'%0D'}"
          echo "name={mod_description}::$desc" >> $GITHUB_OUTPUT
      - name: Upload bannerlord folder
        uses: actions/upload-artifact@v4
        with:
          name: ROTFrench
          path: ./bannerlord/

  publish-on-github:
      needs: ["build"]
      uses: BUTR/workflows/.github/workflows/release-github.yml@master
      with:
        mod_id: ROTFrench
        mod_version: ${{ needs.build.outputs.mod_version }}
        mod_description: ${{ needs.build.outputs.mod_description }}
        artifact_name: ROTFrench

  publish-on-nexusmods:
      needs: ["build"]
      uses: BUTR/workflows/.github/workflows/release-nexusmods.yml@master
      with:
        nexusmods_game_id: mountandblade2bannerlord
        nexusmods_mod_id: 5848
        mod_filename: Realm of Thrones 5.0 - Patch FR BETA
        mod_version: ${{ needs.build.outputs.mod_version }}
        mod_description: ${{ needs.build.outputs.mod_description }}
        artifact_name: ROTFrench
      secrets:
        NEXUSMODS_APIKEY: ${{ secrets.NEXUSMODS_APIKEY }}
        NEXUSMODS_COOKIES: ${{ secrets.NEXUSMODS_COOKIES }}